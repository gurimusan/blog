<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gurimusan blog</title>
    <link>https://gurimusan.github.io/blog/index.xml</link>
    <description>Recent content on gurimusan blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Wed, 08 Mar 2017 23:52:56 +0900</lastBuildDate>
    <atom:link href="https://gurimusan.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Gentoo Linux をインストールする</title>
      <link>https://gurimusan.github.io/blog/post/gentoo-install-battle/</link>
      <pubDate>Wed, 08 Mar 2017 23:52:56 +0900</pubDate>
      
      <guid>https://gurimusan.github.io/blog/post/gentoo-install-battle/</guid>
      <description>

&lt;h1 id=&#34;gentoo-linux-をインストールする&#34;&gt;Gentoo Linux をインストールする&lt;/h1&gt;

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;転職し、新しい会社に入社した。&lt;/p&gt;

&lt;p&gt;PCを支給してくれるいうことで、macにしようかなと思っていたのだが、折角なのでdockerをまともに使える環境が良いなと思い、linuxベースの開発環境を作ることにした。&lt;/p&gt;

&lt;p&gt;そんな折、&lt;a href=&#34;http://d.hatena.ne.jp/joker1007/20161125/1480069437&#34;&gt;MacBook Proを捨ててThinkpad T460sを買ってgentooを入れた&lt;/a&gt;という記事をはてブで見つけて、gentooベースにすることにした。&lt;/p&gt;

&lt;p&gt;PCはノートパソコンで英語配列のものを考え、thinkpadかvaioにしようかと思ったが、thinkpad t460sにした。&lt;/p&gt;

&lt;p&gt;t460sには、もともとwindowsがインストールされているが、その上にGentoo Linux をインストールして、デュアルブート環境にする。&lt;/p&gt;

&lt;h2 id=&#34;gentoo歴&#34;&gt;Gentoo歴&lt;/h2&gt;

&lt;p&gt;6〜7年ほど前、家で1年ほど開発機として使っていた。その後、mac book買ったため、現在まで使っていない。&lt;/p&gt;

&lt;h2 id=&#34;thinkpad-t460s&#34;&gt;Thinkpad T460S&lt;/h2&gt;

&lt;p&gt;マシンスペック。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CPU i7 6600U&lt;/li&gt;
&lt;li&gt;HDD NVMe対応SSD 512GB&lt;/li&gt;
&lt;li&gt;メモリ 24G&lt;/li&gt;
&lt;li&gt;液晶 14型 WQHD 2560×1440&lt;/li&gt;
&lt;li&gt;キーボード 英語配列&lt;/li&gt;
&lt;li&gt;OS Windows 10 Home&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;インストールメディアの作成&#34;&gt;インストールメディアの作成&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.gentoo.org/downloads/&#34;&gt;ダウンロードページ&lt;/a&gt;からLiveDVDをダンロードして、mac上でUSBにddして焼いた。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ diskutil unmountDisk /dev/disk2
$ dd if=/Users/gurimusan/Downloads/livedvd-amd64-multilib-20160704.iso of=/dev/disk2 bs=1m
$ diskutil eject /dev/disk2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;インストール前にやること&#34;&gt;インストール前にやること&lt;/h2&gt;

&lt;h3 id=&#34;uefi-のセキュアブートを切る&#34;&gt;UEFI のセキュアブートを切る&lt;/h3&gt;

&lt;p&gt;UEFIを操作してセキュアブートを切る。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.archlinuxjp.org/index.php/Windows_%E3%81%A8_Arch_%E3%81%AE%E3%83%87%E3%83%A5%E3%82%A2%E3%83%AB%E3%83%96%E3%83%BC%E3%83%88#UEFI_Secure_Boot&#34;&gt;Windows と Arch のデュアルブート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;高速スタートアップを無効化する&#34;&gt;高速スタートアップを無効化する&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;コントロールパネル&amp;rdquo;→&amp;rdquo;ハードウェアとサウンド&amp;rdquo;→&amp;rdquo;電源オプション&amp;rdquo;→&amp;rdquo;カバーを閉じたときの動作を選択&amp;rdquo;から無効化する。&lt;/p&gt;

&lt;h3 id=&#34;windows上でハードディスクのパーティションを分ける&#34;&gt;Windows上でハードディスクのパーティションを分ける。&lt;/h3&gt;

&lt;p&gt;gentooをインストールする領域を確保するために、Cドライブが割り当てられているパーティションを縮小して領域を確保する。&lt;/p&gt;

&lt;p&gt;Cドライブ上のデータを壊さなければ、windows上でやらなくても良い。&lt;/p&gt;

&lt;h2 id=&#34;gentoo-linuxのインストール&#34;&gt;Gentoo Linuxのインストール&lt;/h2&gt;

&lt;p&gt;作成したインストールメディアを起動して、Gentoo Linux をインストールする。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://wiki.gentoo.org/wiki/Handbook:AMD64/ja&#34;&gt;ハンドブック:AMD64 - Gentoo Wiki&lt;/a&gt; を見ながらインストールを行う。&lt;/p&gt;

&lt;h3 id=&#34;ディスクの準備&#34;&gt;ディスクの準備&lt;/h3&gt;

&lt;p&gt;パーティション構成は下記のとおり。&lt;/p&gt;

&lt;p&gt;前述のとおり、winのCドライブにあたるパーティションを縮小して、Gentoo Linux をインストールした領域を確保した。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nvme0n1       477G
├─nvme0n1p1   260M      -- EFI
├─nvme0n1p2    16M      -- winの管理系？
├─nvme0n1p3  68.6G      -- win本体、Cドライブ
├─nvme0n1p4  1000M      -- winのリカバリ領域
├─nvme0n1p5    64G      -- / (ルート)
└─nvme0n1p6 343.1G      -- /home (home)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;新しい領域は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;/&lt;/li&gt;
&lt;li&gt;/home&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の2つに分けた。&lt;/p&gt;

&lt;p&gt;ファイルシステムをxfsを利用する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkfs.xfs /dev/nvme0n1p5
$ mkfs.xfs /dev/nvme0n1p6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;フォーマットしたパーティションをマウントする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mount /dev/nvme0n1p5 /mnt/gentoo
$ mkdir /mnt/gentoo/home /mnt/gentoo/boot
$ mount /dev/nvme0n1p6 /mnt/gentoo/home
$ mount /dev/nvme0n1p1 /mnt/gentoo/boot
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;gentooインストールファイルをインストール&#34;&gt;Gentooインストールファイルをインストール&lt;/h3&gt;

&lt;p&gt;時刻を合わせる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ntpd -q -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gentooミラーリストからstage tarballを取得する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /mnt/gentoo
$ links https://www.gentoo.org/downloads/mirrors/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;stage tarballを展開する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar xvjpf stage3-*.tar.bz2 --xattrs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/mnt/gentoo/etc/portage/make.conf を編集してGentooコンパイルオプションを設定する。&lt;/p&gt;

&lt;p&gt;CFLAGにはマシンアーキテクチャ（-march）と、最適化レベル（-O）を設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CFLAGS=&amp;quot;-march=broadwell -mtune=broadwell -O2 -pipe&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;-marchに skylakeの指定をするとコンパイル時にエラーとなった。&lt;/p&gt;

&lt;p&gt;調べたところ、&lt;a href=&#34;https://wiki.gentoo.org/wiki/Safe_CFLAGS#Skylake&#34;&gt;Safe CFLAGS - Gentoo Wiki&lt;/a&gt; にskylakeの設定例があったため、broadwellに変更した。&lt;/p&gt;

&lt;p&gt;MAKEOPTSでどれだけ並列してコンパイルを実施するか設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MAKEOPTS=&amp;quot;-j4&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CPU_FLAGS_X86 でCPUの命令セットの指定を行う。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CPU_FLAGS_X86=&amp;quot;aes avx avx2 fma3 mmx mmxext popcnt sse sse2 sse3 sse4_1 sse4_2 ssse3&amp;quot;

L10N=&amp;quot;ja en&amp;quot;
LINGUS=&amp;quot;ja en&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;gentooベースシステムのインストール&#34;&gt;Gentooベースシステムのインストール&lt;/h3&gt;

&lt;p&gt;ミラーサーバを設定しておく。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mirrorselect -i -o &amp;gt;&amp;gt; /mnt/gentoo/etc/portage/make.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dnsのコピー&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cp -L /etc/resolv.conf /mnt/gentoo/etc/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;必要なファイルシステムをマウントする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mount -t proc proc /mnt/gentoo/proc
$ mount --rbind /sys /mnt/gentoo/sys
$ mount --make-rslave /mnt/gentoo/sys
$ mount --rbind /dev /mnt/gentoo/dev
$ mount --make-rslave /mnt/gentoo/dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;chrootする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ chroot /mnt/gentoo /bin/bash
$ source /etc/profile
$ export PS1=&#39;(chroot) $PS1&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Portageのリポジトリを更新する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ emerge-webrsync
$ emerge --sync
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;systemdが含んだプロファイルを選択する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ eselect profile list
Available profile symlink targets:
  [1]   default/linux/amd64/13.0
  [2]   default/linux/amd64/13.0/selinux
  [3]   default/linux/amd64/13.0/desktop
  [4]   default/linux/amd64/13.0/desktop/gnome
  [5]   default/linux/amd64/13.0/desktop/gnome/systemd
  [6]   default/linux/amd64/13.0/desktop/plasma
  [7]   default/linux/amd64/13.0/desktop/plasma/systemd
  [8]   default/linux/amd64/13.0/developer
  [9]   default/linux/amd64/13.0/no-multilib
  [10]  default/linux/amd64/13.0/systemd *
  [11]  default/linux/amd64/13.0/x32
  [12]  hardened/linux/amd64
  [13]  hardened/linux/amd64/selinux
  [14]  hardened/linux/amd64/no-multilib
  [15]  hardened/linux/amd64/no-multilib/selinux
  [16]  hardened/linux/amd64/x32
  [17]  hardened/linux/musl/amd64
  [18]  hardened/linux/musl/amd64/x32
  [19]  default/linux/uclibc/amd64
  [20]  hardened/linux/uclibc/amd64

$ eselect profile set 10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/etc/portage/make.confのUSEフラグにsystemdを追加する。&lt;/p&gt;

&lt;p&gt;systemd向けにパッケージを更新する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ emerge -auDN @world
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vim入れる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ emerge -a app-editors/vim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;タイムゾーンを設定する&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &#39;Asia/Tyokyo&#39; &amp;gt; /etc/timezone
$ emerge --config sys-libs/timezone-data
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ロケールを設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vim /etc/locale.gen
en_US ISO-8859-1
en_US.UTF-8 UTF-8
ja_JP.EUC-JP EUC-JP
ja_JP.UTF-8 UTF-8
ja_JP.SHIFT_JIS SHIFT_JIS

$ locale-gen

$ eselect locale list
Available targets for the LANG variable:
  [1]   C
  [2]   en_US
  [3]   en_US.iso88591
  [4]   en_US.utf8 *
  [5]   ja_JP
  [6]   ja_JP.eucjp
  [7]   ja_JP.shiftjis
  [8]   ja_JP.ujis
  [9]   ja_JP.utf8
  [10]  japanese
  [11]  japanese.euc
  [12]  POSIX
  [ ]   (free form)

$ eselect locale set 4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;環境設定の再読み込み。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ env-update
$ source /etc/profile
$ export PS1=&amp;quot;(chroot) $PS1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;カーネルの設定&#34;&gt;カーネルの設定&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ emerge -a sys-kernel/gentoo-sources
$ emerge -a sys-apps/pciutils
$ cd /usr/src/linux
$ make menuconfig
$ make &amp;amp;&amp;amp; make modules_install
$ make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;システムの設定&#34;&gt;システムの設定&lt;/h3&gt;

&lt;p&gt;fstabの設定。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat /etc/fstab
PARTUUID=5ce260de-80a3-4984-a4ea-758e917e3501       /boot           vfat    noauto,noatime                  1   2
PARTUUID=d193f1a5-edec-4c52-bbd0-5aa43de8f3be       /           xfs noatime                     0   1
PARTUUID=acabd133-51ed-4b85-bbb2-b5add70bef5f       /home           xfs noatime                     0   2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;grubはnvme未対応のため、利用できない。&lt;/p&gt;

&lt;p&gt;なので、systemd-bootを利用する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bootctl --path=/boot install

$ vim /boot/loader/loader.conf
default gentoo
timeout 5
editor  0

$ vim /boot/loader/entries/gentoo.conf
title   Gentoo Linux
linux   /EFI/gentoo/vmlinuz-4.9.6-gentoo-r1
options root=PARTUUID=d193f1a5-edec-4c52-bbd0-5aa43de8f3be init=/usr/lib/systemd/systemd rw noefi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;カーネルイメージの配置。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir /boot/EFI/gentoo
$ cp /boot/vmlinuz-4.9.6-gentoo-r1 /boot/EFI/gentoo/.
$ cp /boot/System.map-4.9.6-gentoo-r1 /boot/EFI/gentoo/.
$ cp /boot/config-4.9.6-gentoo-r1 /boot/EFI/gentoo/.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;rebootして起動できればOK。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ exit
$ cd
$ umount -R /mnt/gentoo
$ shutdown -h now
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;インストール後の感想&#34;&gt;インストール後の感想&lt;/h2&gt;

&lt;p&gt;今のところ満足。やっぱり動作が軽快なのが良い。&lt;/p&gt;

&lt;p&gt;日本語入力の候補がウィンドウの左下に出てくること以外は。。。&lt;/p&gt;

&lt;h2 id=&#34;インストールしたもの&#34;&gt;インストールしたもの&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;awesome&lt;/li&gt;
&lt;li&gt;rxvt-unicode&lt;/li&gt;
&lt;li&gt;slim&lt;/li&gt;
&lt;li&gt;zsh&lt;/li&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;chromium&lt;/li&gt;
&lt;li&gt;firefox&lt;/li&gt;
&lt;li&gt;neovim&lt;/li&gt;
&lt;li&gt;ranger&lt;/li&gt;
&lt;li&gt;spacefm&lt;/li&gt;
&lt;li&gt;feh&lt;/li&gt;
&lt;li&gt;fcitx&lt;/li&gt;
&lt;li&gt;mozc&lt;/li&gt;
&lt;li&gt;scrot&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ansibleでEC2インスタンスを作成する</title>
      <link>https://gurimusan.github.io/blog/post/how-to-create-ec2-instance-use-ansible/</link>
      <pubDate>Tue, 08 Nov 2016 18:35:06 +0900</pubDate>
      
      <guid>https://gurimusan.github.io/blog/post/how-to-create-ec2-instance-use-ansible/</guid>
      <description>

&lt;h1 id=&#34;やったこと&#34;&gt;やったこと&lt;/h1&gt;

&lt;p&gt;ansibleを使って、aws ec2インスタンスを作成する。&lt;/p&gt;

&lt;h1 id=&#34;実行環境&#34;&gt;実行環境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Mac OS X El Capitan 10.11.6&lt;/li&gt;
&lt;li&gt;python 2.7.12&lt;/li&gt;
&lt;li&gt;ansible 2.2.0.0&lt;/li&gt;
&lt;li&gt;boto 2.43.0&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;事前に必要なこと-及び必要なツール&#34;&gt;事前に必要なこと、及び必要なツール&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;aws上のVPCの構築&lt;/li&gt;
&lt;li&gt;IAMユーザ、及びアクセスキー・シークレットキーの入手&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yyuu/pyenv&#34;&gt;pyenv&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/direnv/direnv&#34;&gt;direnv&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;ディレクトリ構成&#34;&gt;ディレクトリ構成&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;.
├── .envrc
├── .python-version
├── hosts
│   └── development
│       ├── ec2.ini
│       ├── ec2.py
│       ├── inventry
│       └── group_vars
│           └── all.yml
├── roles
│   └── ec2
│       └── tasks
│           ├── instance.yml
│           ├── keypair.yml
│           ├── main.yml
│           └── security_group.yml
└── ec2.yml(プレイブック)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;direnv&#34;&gt;direnv&lt;/h1&gt;

&lt;p&gt;適用なディレクトリを作って、下記を実行し、環境変数にAWSのAPI用の接続情報を設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ (
echo &#39;export AWS_ACCESS_KEY_ID=&amp;lt;アクセスキー&amp;gt;&#39;
echo &#39;export AWS_SECRET_ACCESS_KEY=&amp;lt;シークレットキー&amp;gt;&#39;
) &amp;gt; .envrc
$ direnv allow
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;python&#34;&gt;python&lt;/h1&gt;

&lt;p&gt;pyenv使ってpythonのインストール、2.7系ならなんでも良い。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv install 2.7.12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記で作ったディレクトリに移動した時に、特定のpython環境を使うように設定する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pyenv virtualenv 2.7.12 example_cm_py_27_12
$ echo &#39;example_cm_py_27_12&#39; &amp;gt; .python-version
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;boto と ansibleをインストールする。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ pip install boto==2.43.0
$ pip install ansible==2.2.0.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;ec2用のdynamic-inventory-ファイルを入手する&#34;&gt;EC2用のdynamic inventory ファイルを入手する&lt;/h1&gt;

&lt;p&gt;「&lt;a href=&#34;http://docs.ansible.com/ansible/intro_dynamic_inventory.html#example-aws-ec2-external-inventory-script&#34;&gt;Example: AWS EC2 External Inventory Script&lt;/a&gt;」から&lt;a href=&#34;https://raw.githubusercontent.com/ansible/ansible/devel/contrib/inventory/ec2.py&#34;&gt;ec2.py&lt;/a&gt;と&lt;a href=&#34;https://raw.githubusercontent.com/ansible/ansible/devel/contrib/inventory/ec2.ini&#34;&gt;ec2.ini&lt;/a&gt;を入手して、「hosts/development」配下に配置する。&lt;/p&gt;

&lt;p&gt;「ec2.py」には、実行権限を付与する。&lt;/p&gt;

&lt;h1 id=&#34;プレイブックを作成する&#34;&gt;プレイブックを作成する&lt;/h1&gt;

&lt;p&gt;「ec2.yml」というファイル名でプレイブックを作成する。※ファイル名はなんでも良い。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
- hosts: localhost
  connection: local
  gather_facts: False
  roles:
    - role: ec2

- hosts: launched_{group_name}
  remote_user: ec2-user
  gather_facts: no
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;イベントリファイルを作成する&#34;&gt;イベントリファイルを作成する&lt;/h1&gt;

&lt;p&gt;「hosts/development」配下に「inventry」というファイルを作成する。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[localhost]
localhost ansible_python_interpreter=~/.pyenv/shims/python
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;イベントリ用の変数定義を行うために、「hosts/development/group_vars」というディレクトリを作成し、「hosts/development/group_vars/all.yml」に下記の変数定義を行う。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;aws:
  # key pair to use on the instance
  keypair_name: example_development
  # security group name, and instance tag name.
  group_name: example_development
  # リージョン
  region: ap-northeast-1
  # Amazon linux の最新のディスクイメージ
  ec2_image: ami-cbf90ecb
  # EC2 のインスタンスタイプ
  ec2_instance_type: t2.micro
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;ec2ロールの作成&#34;&gt;EC2ロールの作成&lt;/h1&gt;

&lt;p&gt;roles/ec2/tasks/main.yml&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
- include: keypair.yml
- include: security_group.yml
- include: instance.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;roles/ec2/tasks/kyepair.yml&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
- name: Create EC2 keypair.
  ec2_key:
    # Name of the key pair.
    name: &amp;quot;{{ aws.keypair_name }}&amp;quot;
    # The AWS region to use.
    region: &amp;quot;{{ aws.region }}&amp;quot;
  register: ec2_keypair

- name: Create keypair file.
  file:
    path=~/.ssh/{{ ec2_keypair.key.name }}.pem
    state=touch
    mode=0600
  when: ec2_keypair.key.private_key is defined

- name: Write keypair to file.
  local_action: shell echo &amp;quot;{{ ec2_keypair.key.private_key }}&amp;quot; &amp;gt; ~/.ssh/{{ ec2_keypair.key.name }}.pem
  when: ec2_keypair.key.private_key is defined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;roles/ec2/tasks/security_group.yml&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
- name: Create EC2 Security Group.
  ec2_group:
    # Name of the security group.
    name: &amp;quot;{{ aws.group_name }}&amp;quot;
    # Description of the security group.
    description: &amp;quot;{{ aws.group_name }} server security group&amp;quot;
    # The AWS region to use.
    region: &amp;quot;{{ aws.region }}&amp;quot;

    # Inbound.
    rules:
      - proto: tcp
        from_port: 80
        to_port: 80
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: icmp
        from_port: -1 # icmp type, -1 = any type
        to_port: -1 # icmp subtype, -1 = any subtype
        cidr_ip: 10.0.0.0/0

    # Outbound.
    rules_egress:
      - proto: all
        from_port: 0
        to_port: 65535
        cidr_ip: 0.0.0.0/0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;roles/ec2/tasks/instance.yml&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
- name: Create EC2 instance.
  ec2:
    # ami ID to use for the instance.
    image: &amp;quot;{{ aws.ec2_image }}&amp;quot;
    # instance type to use for the instance.
    instance_type: &amp;quot;{{ aws.ec2_instance_type }}&amp;quot;
    # The AWS region to use.
    region: &amp;quot;{{ aws.region }}&amp;quot;
    # key pair to use on the instance
    key_name: &amp;quot;{{ aws.keypair_name }}&amp;quot;
    # security group (or list of groups) to use with the instance.
    group: &amp;quot;{{ aws.group_name }}&amp;quot;
    instance_tags:
      Name: &amp;quot;{{ aws.group_name }}&amp;quot;
    wait: yes
    wait_timeout: 300
  register: ec2

- name: Add new instance to host group
  add_host: hostname={{ item.public_ip }} groupname=&amp;quot;launched_{{aws.group_name}}&amp;quot;
  with_items: &#39;{{ec2.instances}}&#39;

- name: Wait for SSH to come up
  wait_for: host={{ item.public_dns_name }} port=22 delay=60 timeout=320 state=started
  with_items: &#39;{{ec2.instances}}&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;実行&#34;&gt;実行&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;$ ansible-playbook -i hosts/development ec2.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;参考にしたサイト&#34;&gt;参考にしたサイト&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.ansible.com/ansible/ec2_module.html&#34;&gt;ec2 - create, terminate, start or stop an instance in ec2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.ansible.com/ansible/ec2_group_module.html&#34;&gt;ec2_group - maintain an ec2 VPC security group.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.ansible.com/ansible/ec2_key_module.html&#34;&gt;ec2_key - maintain an ec2 key pair.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Raspberry PI で、ADCを使って温度を測定する</title>
      <link>https://gurimusan.github.io/blog/post/raspberry-pi-how-to-measuring-temperature-using-adc/</link>
      <pubDate>Thu, 29 Sep 2016 23:52:56 +0900</pubDate>
      
      <guid>https://gurimusan.github.io/blog/post/raspberry-pi-how-to-measuring-temperature-using-adc/</guid>
      <description>

&lt;h1 id=&#34;やりたいこと&#34;&gt;やりたいこと&lt;/h1&gt;

&lt;p&gt;アナログ温度センサを使って、Raspberry PIで測る。&lt;/p&gt;

&lt;h1 id=&#34;使用する機器-及び部品&#34;&gt;使用する機器、及び部品&lt;/h1&gt;

&lt;p&gt;温度センサは MCP9700を利用する。&lt;/p&gt;

&lt;p&gt;MCP9700はアナログセンサで、Raspberry PI のピンはデジタルな入力しかできないので、アナログ-デジタル変換を行うために、ADコンバータ MCP3008を利用する。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Raspberry PI3 Model B&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://akizukidenshi.com/catalog/g/gI-03286/&#34;&gt;温度センサ MCP9700&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://akizukidenshi.com/catalog/g/gI-09485/&#34;&gt;ADコンバータ MCP3008&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://akizukidenshi.com/catalog/g/gP-00315/&#34;&gt;ブレッドボード EIC-801&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ジャンパワイア&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;raspberry-piでspiをセットアッフ-する&#34;&gt;Raspberry PiでSPIをセットアップする&lt;/h1&gt;

&lt;p&gt;MCP3008は、SPIバスで接続する必要があるため、Raspberry PI のSPIを有効にする。&lt;/p&gt;

&lt;p&gt;下記コマンドを実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo raspi-config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Advanced Optionsで A6 SPIを選択して、下記の両方で Yes を選択。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SPI interface to be enabled?&lt;/li&gt;
&lt;li&gt;SPI kernel module to be loaded by default?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;再起動。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo reboot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;spi_bcm2835 がロードされていることを確認&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ lsmod | grep spi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;SPI通信に必要なPythonライブラリをインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install python-pip
$ sudo pip install spidev
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;ブレッドボード配線&#34;&gt;ブレッドボード配線&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://gurimusan.github.io/blog/img/20160930_raspberry_pi_how_to_measuring_temperature_using_adc/breadboard.jpg&#34; alt=&#34;ブレッドボードの配線&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;温度センサ-mcp9700-の配線&#34;&gt;温度センサ MCP9700 の配線&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://akizukidenshi.com/download/MCP9701-ETO.pdf&#34;&gt;データシート1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://akizukidenshi.com/download/mcp9700.pdf&#34;&gt;データシート2&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;VDD -&amp;gt; Raspberry Pi 3.3V&lt;/li&gt;
&lt;li&gt;VOUT -&amp;gt; VOUT -&amp;gt; MCP3008 CH0&lt;/li&gt;
&lt;li&gt;GND -&amp;gt; Raspberry Pi GND&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;mcp3008の配線&#34;&gt;MCP3008の配線&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://akizukidenshi.com/download/ds/microchip/mcp3008.pdf&#34;&gt;データシート&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MCP3008 VDD -&amp;gt; Raspberry PI 3.3V&lt;/li&gt;
&lt;li&gt;MCP3008 VREF -&amp;gt; Raspberry PI 3.3V&lt;/li&gt;
&lt;li&gt;MCP3008 AGND -&amp;gt; Raspberry PI GND&lt;/li&gt;
&lt;li&gt;MCP3008 CLK -&amp;gt; Raspberry PI GPIO 11 (SCLK)&lt;/li&gt;
&lt;li&gt;MCP3008 DOUT -&amp;gt; Raspberry PI GPIO 9 (MISO)&lt;/li&gt;
&lt;li&gt;MCP3008 DIN -&amp;gt; Raspberry PI GPIO 10 (MOSI)&lt;/li&gt;
&lt;li&gt;MCP3008 CS/SHDN -&amp;gt; Raspberry PI GPIP 8 (CE0)&lt;/li&gt;
&lt;li&gt;MCP3008 DGND -&amp;gt; Raspberry PI GND&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;スクリプト&#34;&gt;スクリプト&lt;/h1&gt;

&lt;p&gt;下記を adc_tmp36.py というファイル名で保存。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# -*- coding: utf-8 -*-

import sys

import time

import spidev

spi = spidev.SpiDev()
spi.open(0,0)


def analog_read(channel):
    r = spi.xfer2([1, (8 + channel) &amp;lt;&amp;lt; 4, 0])
    adc_out = ((r[1]&amp;amp;3) &amp;lt;&amp;lt; 8) + r[2]
    return adc_out


if __name__ == &#39;__main__&#39;:
    try:
        while True:
            reading = analog_read(0)
            voltage = reading * 3.3 / 1024
            temp_c = voltage * 100 - 50
            print(&amp;quot;Volts V=%f\tTemp C=%f&amp;quot; % (voltage, temp_c))
            time.sleep(1)
    except KeyboardInterrupt:
        pass
    finally:
        spi.close()

    sys.exit(0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行すると下記ように出力される。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python adc_tmp36.py
Volts V=0.802441    Temp C=30.244141
Volts V=0.783105    Temp C=28.310547
Volts V=0.795996    Temp C=29.599609
Volts V=0.799219    Temp C=29.921875
Volts V=0.799219    Temp C=29.921875
Volts V=0.799219    Temp C=29.921875
Volts V=0.799219    Temp C=29.921875
Volts V=0.799219    Temp C=29.921875
Volts V=0.802441    Temp C=30.244141
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;室温は25℃くらいだが、高く表示される。&lt;/p&gt;

&lt;p&gt;精度は ±4℃ らしいので、その誤差の範囲なのか？&lt;/p&gt;

&lt;h1 id=&#34;スクリプトの説明&#34;&gt;スクリプトの説明&lt;/h1&gt;

&lt;h2 id=&#34;analog-read&#34;&gt;analog_read&lt;/h2&gt;

&lt;p&gt;MCP3008の特定のチャネルへの送受信のやりとりをする関数。&lt;/p&gt;

&lt;p&gt;CP3008のデータシートを見ると、MCP3008への送受信を行う方法が記載されている。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://gurimusan.github.io/blog/img/20160930_raspberry_pi_how_to_measuring_temperature_using_adc/mcp3008_spi_communication.png&#34; alt=&#34;CP3008の入力値と返り値&#34; /&gt;&lt;/p&gt;

&lt;p&gt;送信データは、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;00000001 1xxx0000 00000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のような24bitのデータとなる。&lt;/p&gt;

&lt;p&gt;最初の 00000001 はスタートビット。&lt;/p&gt;

&lt;p&gt;1xxx は 読み込みたいチャネルのよって変わる。&lt;/p&gt;

&lt;p&gt;例えば、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ch 0 なら 1000&lt;/li&gt;
&lt;li&gt;ch 1 なら 1001&lt;/li&gt;
&lt;li&gt;ch 2 なら 1010&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;のようになる。&lt;/p&gt;

&lt;p&gt;プログラムコードに戻ると、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;r = spi.xfer2([1, (8 + channel) &amp;lt;&amp;lt; 4, 0])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という処理では、xfer2という関数に3つの値を格納した配列を渡しているが、これが上記の24bitの送信データを表している。&lt;/p&gt;

&lt;p&gt;つまり、xfer2という関数に渡している配列のうち&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;最初の要素は 1 は 00000001 を表す&lt;/li&gt;
&lt;li&gt;2番目の要素の (8 + channel) &amp;lt;&amp;lt; 4 は 1xxx0000 を表す&lt;/li&gt;
&lt;li&gt;3癌目の要素は 00000000 を表す&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;xfer2からの返り値は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[0, 0, 246]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようなデータが返却される。&lt;/p&gt;

&lt;p&gt;これも入力値と同様に24bitのデータを表す。&lt;/p&gt;

&lt;p&gt;MCP3008からの受信データは、下位10bitがチャネルへ入力されたデータとなるため、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;adc_out = ((r[1]&amp;amp;3) &amp;lt;&amp;lt; 8) + r[2]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;という処理は、xfer2から返却された配列の&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2番目の要素と3、00000011との論理積を取ることで、下位2bitを取得する&lt;/li&gt;
&lt;li&gt;2番目の要素の下位2bitを8bit左にシフトして、3番目の要素との論理和をとることで、受信データの下位10bitが取得する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後に、取得した下位10bitのデータを返却する。&lt;/p&gt;

&lt;h2 id=&#34;main&#34;&gt;main&lt;/h2&gt;

&lt;p&gt;ここで行っている処理は、下記のとおり。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;analog_read関数を実行して、MCP3008のch 0のデータを読み取り、受信データの下位10bitを取得する&lt;/li&gt;
&lt;li&gt;analog_read関数の返り値を電圧に変換する&lt;/li&gt;
&lt;li&gt;電圧を温度（摂氏）に変換する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;電圧への変換方法は、MCP3008のEQUATION 4-2を見ると、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;out = (1024 * Vin) / Vref
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と記述があるので&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Vin = (out * Vref) / 1024
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、MCP3008からの受信データからMPC9700から出力された電圧が求まる。&lt;/p&gt;

&lt;p&gt;MPC9700のデータシートの4.0 活用情報」を見るとセンサーの変換関数が記載されている。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Vout = Tc1 * Ta + V0c

Ta = 周囲温度
Vout = センサー出力電圧
V0c = 0℃の時のセンサーの出力電圧(500mV)
Tc1 = 温度係数(10mV)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なので&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ta = Vout / Tc1 - V0c
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、温度が求まる。&lt;/p&gt;

&lt;h1 id=&#34;参考にしたサイト&#34;&gt;参考にしたサイト&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/masato/items/f089a17b1c9329eb7d03&#34;&gt;Raspberry PiのPythonからTMP36のアナログ温度センサとMCP3008のADコンバータを使う&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pongsuke.hatenablog.com/entry/2016/01/08/111937&#34;&gt;温度センサーを試す&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://elinux.org/RPi_Low-level_peripherals#Model_A.2B.2C_B.2B_and_B2&#34;&gt;Raspberry PI のピン配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>